with(questionnaire_data, my_se(Height))
# Working with the data in questionnaire_data, apply the function my_se to Height
#
# We can use a function that we have written, here my_se, in dplyr
#
library(dplyr)
#
questionnaire_data %>% summarise(Height_se = my_se(Height))
#
# Now let's make use of some of the power of dplyr
#
# Let's work out the standard error for Females and Males separately
#
questionnaire_data %>% group_by(Sex) %>%
summarise(Height_se = my_se(Height)) # sample standard error (how unreliable is the sample mean)
#
# Let's also compute and report the sample mean
#
questionnaire_data %>% group_by(Sex) %>%
summarise(Height_mean = mean(Height), # sample mean
Height_se = my_se(Height)) %>% # sample standard error (how unreliable is the sample mean)
as.data.frame() # this last line ensures all decimals are printed, by transforming the tibble into a data frame
#
# So the sample mean for Males has a higher standard error, and is therefore more unreliable (less accurate)
# than the sample mean for Females
#
# Let's confirm the values that our function my_se produces
#
questionnaire_data %>% group_by(Sex) %>%
summarise(Height_mean = mean(Height), # sample mean
Height_se = my_se(Height), # sample standard error (how accurate is the sample mean)
sd = sd(Height), # sample standard deviation
n = n(), # sample size
se = sd / sqrt(n)) %>% # standard error, calculated using sd and n, just to check my_se
as.data.frame() # to ensure all decimals are printed
#
#
# Same answers for the standard error!
#
#
#####################################################################
#
# A more sophisticated function
#
trimmed_mean <- function(x, trim = 0.1){ # Take in x and trim, set by default to 0.1
#
# x and trim are the arguments of this function
#
# Function to work out the sample mean and trimmed mean
# of data passed through in x
# trim: the fraction (0 to 0.5) of observations to be trimmed from each end of x
# before the mean is computed
#
out_m <- mean(x) # Sample mean
out_m_trimmed <- mean(x, trim = trim) # Trimmed mean
#
# Return these values in a list
#
return(list(M = out_m, M_TRIMMED = out_m_trimmed))
# We can specify names for the returned objects
}
#
# ------------------------------------------------------------------
#
# Examples, applied to the speed of the group
#
questionnaire_data_2 <- questionnaire_data %>%
mutate(Speed = Distance / Travel_time, Speed_mph = 60 * Speed)
#
# Look at the values of speed in miles per hour
#
questionnaire_data_2$Speed_mph
#
trimmed_mean(questionnaire_data_2$Speed_mph) # Uses the default value of trim (0.1)
trimmed_mean(questionnaire_data_2$Speed_mph, trim = 0.2) # Sets trim = 0.2
#
# We can extract the individual elements of the results using $
#
results <- trimmed_mean(questionnaire_data_2$Speed_mph)
results$M # Extract M, the sample mean
results$M_TRIMMED # Sample trimmed mean
results_2 <- trimmed_mean(questionnaire_data_2$Speed_mph, trim = 0.2)
results_2$M
results_2$M_TRIMMED
#
# Compare these sample trimmed means
#
c(results$M_TRIMMED, results_2$M_TRIMMED)
#
# They are different, but the sample means are the same
#
c(results$M, results_2$M)
#
#
# ------------------------------------------------------------------
#
# It's worth noting that there are various ways of referring to the arguments of a function
#
# Above we used
#
trimmed_mean(questionnaire_data_2$Speed_mph, trim = 0.2)
#
# We can name each argument
#
args(trimmed_mean) # Check what the arguments are
#
trimmed_mean(x = questionnaire_data_2$Speed_mph, trim = 0.2) # Named arguments
#
# Naming the arguments allows us not to worry about the order in which they are specified
#
trimmed_mean(trim = 0.2, x = questionnaire_data_2$Speed_mph) # Works fine!
#
#
# ------------------------------------------------------------------
#
# ***** A way of documenting a function that will be of use later *****
#
# Documenting our functions is very important.
# It helps others to understand what the function does.
# It's important to note that "others" in this sentence can refer to "future you"!
#
# Here we present a way of documenting our function that will be useful later:
#' Statistical Summaries of a Numeric Data Set
#'
#' This function provides statistical summaries of
#' a numeric data set.
#'
#' @param x A numeric vector containing the data.
#' @param trim The fraction (0 to 0.5) of observations to be trimmed from each end of x before the mean is computed. Default is 0.1.
#'
#' @return A named vector of numerical summaries:
#' \describe{
#' \item{M}{The mean of the data.}
#' \item{M_TRIMMED}{The trimmed mean of the data.}
#' }
trimmed_mean <- function(x, trim = 0.1){
#
out_m <- mean(x) # Sample mean
out_m_trimmed <- mean(x, trim = trim) # Trimmed mean
#
# Return these values in a list
#
return(list(M = out_m, M_TRIMMED = out_m_trimmed))
}
# The solution to the 4th task----------------------
x <- c(2, 6, NA, 5, 2, 1, NA, 6, 6, 7, NA, 4, 0)
statistics_NA <- function(x, na.rm = T){
min <- min(x, na.rm)
mean <- mean(x, na.rm)
sd <- sd(x, na.rm)
max <- max(x, na.rm)
number_missing <- sum(is.na(x))
df <- data.frame(min, mean, sd, max, number_missing)
returnValue(df)
}
## $min
statistics_NA(x)$min
## $mean
statistics_NA(x)$mean
## $sd
statistics_NA(x)$sd
## $max
statistics_NA(x)$max
## $number_missing
statistics_NA(x)$number_missing
## $min
statistics_NA(x, na.rm = F)$min
## $mean
statistics_NA(x, na.rm = F)$mean
## $sd
statistics_NA(x, na.rm = F)$sd
## $max
statistics_NA(x, na.rm = F)$max
## $number_missing
statistics_NA(x, na.rm = F)$number_missing
# The solution to the 4th task----------------------
statistics_NA <- function(x, na.rm = T){
x <- c(2, 6, NA, 5, 2, 1, NA, 6, 6, 7, NA, 4, 0)
min <- min(x)
mean <- mean(x)
sd <- sd(x, na.rm)
max <- max(x, na.rm)
number_missing <- sum(is.na(x))
df <- data.frame(min, mean, sd, max, number_missing)
returnValue(df)
}
## $min
statistics_NA(x)$min
## $mean
statistics_NA(x)$mean
## $sd
statistics_NA(x)$sd
## $max
statistics_NA(x)$max
## $number_missing
statistics_NA(x)$number_missing
## $min
statistics_NA(x, na.rm = F)$min
## $mean
statistics_NA(x, na.rm = F)$mean
## $sd
statistics_NA(x, na.rm = F)$sd
## $max
statistics_NA(x, na.rm = F)$max
## $number_missing
statistics_NA(x, na.rm = F)$number_missing
# The solution to the 4th task----------------------
statistics_NA <- function(x, na.rm = T){
x <- c(2, 6, NA, 5, 2, 1, NA, 6, 6, 7, NA, 4, 0)
min <- min(x, na.rm)
mean <- mean(x, na.rm)
sd <- sd(x, na.rm)
max <- max(x, na.rm)
number_missing <- sum(is.na(x))
df <- data.frame(min, mean, sd, max, number_missing)
returnValue(df)
}
## $min
statistics_NA(x)$min
## $mean
statistics_NA(x)$mean
## $sd
statistics_NA(x)$sd
## $max
statistics_NA(x)$max
## $number_missing
statistics_NA(x)$number_missing
## $min
statistics_NA(x, na.rm = F)$min
## $mean
statistics_NA(x, na.rm = F)$mean
## $sd
statistics_NA(x, na.rm = F)$sd
## $max
statistics_NA(x, na.rm = F)$max
## $number_missing
statistics_NA(x, na.rm = F)$number_missing
# The solution to the 4th task----------------------
statistics_NA <- function(x, na.rm = T){
x <- c(2, 6, NA, 5, 2, 1, NA, 6, 6, 7, NA, 4, 0)
min <- min(x)
mean <- mean(x)
sd <- sd(x)
max <- max(x)
number_missing <- sum(is.na(x))
df <- data.frame(min, mean, sd, max, number_missing)
returnValue(df)
}
## $min
statistics_NA(x)$min
## $mean
statistics_NA(x)$mean
## $sd
statistics_NA(x)$sd
## $max
statistics_NA(x)$max
## $number_missing
statistics_NA(x)$number_missing
## $min
statistics_NA(x, na.rm = F)$min
## $mean
statistics_NA(x, na.rm = F)$mean
## $sd
statistics_NA(x, na.rm = F)$sd
## $max
statistics_NA(x, na.rm = F)$max
## $number_missing
statistics_NA(x, na.rm = F)$number_missing
install.packages("latexpdf")
library(latexpdf)
install.packages("tinytex")
install.packages("pandoc")
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages('tinytex')
library(tinytex)
install.packages("tinytex")
tinytex::install_tinytex()
library(formatR)
library(formatR)
install.packages(c('dplyr', 'devtools', 'ggplot2', 'quantmod'))
install.packages(c('XBRL', 'finreportr', 'cowplot', 'Rmisc', 'gridExtra'))
library(devtools)
install_github("bergant/finstr")
# if you do not see any error messages then you are all set.
install.packages(c('dplyr', 'devtools', 'ggplot2', 'quantmod'))
install.packages(c("dplyr", "devtools", "ggplot2", "quantmod"))
install.packages(c('XBRL', 'finreportr', 'cowplot', 'Rmisc', 'gridExtra'))
library(devtools)
install_github("bergant/finstr")
library(plyr)
library(dplyr)
library(XBRL)
library(finreportr)
library(devtools)
library(ggplot2)
library(cowplot)
library(quantmod)
library(Rmisc)
library(gridExtra)
library(finstr)
# if you do not see any error messages then you are all set.
# if you do not see any error messages then you are all set.
# if you see warning messages don't worry, that's fine anyway.
# if you do not see any error messages then you are all set.
# if you see warning messages don't worry, that's fine anyway.
# if you do not see any error messages then you are all set.
# if you see warning messages don't worry, that's fine anyway.
install.packages(c('dplyr', 'devtools', 'ggplot2', 'quantmod'))
install.packages(c('XBRL', 'finreportr', 'cowplot', 'Rmisc', 'gridExtra'))
library(devtools)
install_github("bergant/finstr")
library(plyr)
library(dplyr)
library(XBRL)
library(finreportr)
library(devtools)
library(ggplot2)
library(cowplot)
library(quantmod)
library(Rmisc)
library(gridExtra)
library(finstr)
# Exercise 1: SIMPLE LINEAR REGRESSION
# install.packages("alr4", repos = "http://www.stats.bris.ac.uk/R/") # Needed on your own machine
library(alr4)
head(Forbes)
df <- data.frame(Forbes)
df
?alr4
?alr4
#----------------------------------------------
library(ggplot2) # For powerful graphics
#----------------------------------------------
library(ggplot2) # For powerful graphics
ggplot(df, aes(x = pres, y = bp)) +
geom_point() +
labs(x = "Pressure (inches of mercury)",
y = "Temperature (degree Farenheit)",
title = "Data int the Forbes",
subtitle = "Random sample of size 6")
library(dplyr)
#
summary_forbes <- Forbes %>%
summarise(mean_pres = mean(pres),
median_pres = median(pres),
var_pres = var(pres),
sd_pres = sd(pres),
IQR_pres = IQR(pres),
mean_bp = mean(bp),
median_bp = median(bp),
var_bp = var(bp),
sd_bp = sd(bp),
IQR_bp = IQR(bp))
summary_forbes
?summarise
summary_forbes
# Using with -------------------------------------------
mean_pres <- with(Forbes, mean(pres))
median_pres <- with(Forbes, median(pres))
var_pres <- with(Forbes, var(pres))
sd_pres <- with(Forbes, sd(pres))
IQR_pres <- with(Forbes, IQR(pres))
mean_bp <- with(Forbes, mean(bp))
median_bp <- with(Forbes, median(bp))
var_bp <- with(Forbes, var(bp))
sd_bp <- with(Forbes, sd(bp))
IQR_bp <- with(Forbes, IQR(bp))
mean_pres; median_pres; var_pres; sd_pres; IQR_pres
mean_bp; median_bp; var_bp; sd_bp; IQR_bp
m <- lm(bp ~ pres, data = Forbes)
coef(m)
# Use the geom_smooth geometry from the ggplot2 package to show in blue the fitted line on the plot that you created above-----------------------------------
ggplot(Forbes,
aes(x = pres, y = bp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
labs(x = "Pressure (inches of mercury)",
y = "Temperature (degrees Farenheight)")
# Use the function add_predictions from the modelr package to compute the fitted values and to include them with the original data. Add these fitted values to your plot in green.------------------
library(modelr)
# Use the geom_smooth geometry from the ggplot2 package to show in blue the fitted line on the plot that you created above-----------------------------------
ggplot(Forbes,
aes(x = pres, y = bp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
labs(x = "Pressure (inches of mercury)",
y = "Temperature (degrees Farenheight)")
# Use the function add_predictions from the modelr package to compute the fitted values and to include them with the original data. Add these fitted values to your plot in green.------------------
library(modelr)
#
forbes_with_fitted_values <- Forbes %>%
# Add the fitted values or predictions from m
add_predictions(m)
#
ggplot(forbes_with_fitted_values,
aes(x = pres, y = bp)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "blue") +
geom_point(aes(y = pred), col = "green", pch = 17, size = 3) +
labs(x = "Pressure (inches of mercury)",
y = "Temperature (degrees Farenheight)")
# Is there an underlying relationship between temperature and pressure? Justify your conclusion.-------------------
summary(m)
# Here is the relevant p-value:
pvalue <- signif(summary(m)$coefficients[2,4], 3) # Save the p-value to three significant figures
pvalue
# Add the confidence and prediction intervals lines to your graph-----------------------
forbes_conf <- data.frame(Forbes, predict(m, interval = "confidence"))
forbes_pred <- data.frame(Forbes, predict(m, interval = "prediction"))
#
# Add prediction intervals to the plot
#
ggplot(forbes_with_fitted_values,
aes(x = pres, y = bp)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, colour = "blue") +
geom_line(aes(y = lwr), colour = "blue", data = forbes_conf) +
geom_line(aes(y = upr), colour = "blue", data = forbes_conf) +
geom_line(aes(y = lwr), colour = "red", data = forbes_pred) +
geom_line(aes(y = upr), colour = "red", data = forbes_pred) +
labs(x = "Pressure (inches of mercury)",
y = "Temperature (degrees Farenheight)")
setwd("C:/Users/User/Downloads/Math525/Coursework/Coursework FIles")
library("plyr")
library("dplyr")
library("readr")
library("XBRL")
library("finreportr")
library("devtools")
library("ggplot2")
library("cowplot")
library("quantmod")
library("Rmisc")
library("grid")
library("gridExtra")
library("finstr")
## download the files from DLE into a folder (e.g. here it is 'STO7009\\code')
## then set the working directory to this folder
# new.wd <- paste0(Sys.getenv('USERPROFILE'), "C:/Users/User/Downloads/Math525/Coursework/Coursework FIles")      # path to wd
#
# setwd(new.wd)      # change the wd
#
# getwd()            # check the new wd
# load the software-------------------------------------------------------------
eval(call(load('banR.R')))
# set some parameters for the session-------------------------------------------
options(dplyr.print_max = 1000)
options(warn = -1)
options(stringsAsFactors = FALSE)
options(HTTPUserAgent = "name_surname   name_surname@domain.com")
#################
# CW statements
#################
# create bs and is statements in R for the two companies------------------------
Airtel_Africa.bs = make.statement(template='bs_template_Airtel_Africa.csv', skeleton="bs_skeleton.R", digits = 2)
Airtel_Africa.is = make.statement(template='is_template_Airtel_Africa.csv', skeleton="is_skeleton.R", digits = 2)
Vodafone_Group.bs = make.statement(template='bs_template_Vodafone_Group.csv', skeleton="bs_skeleton.R", digits = 2)
Vodafone_Group.is = make.statement(template='is_template_Vodafone_Group.csv', skeleton="is_skeleton.R", digits = 2)
# check statements--------------------------------------------------------------
check_statement(Airtel_Africa.bs)
check_statement(Airtel_Africa.is)
check_statement(Vodafone_Group.bs)
check_statement(Vodafone_Group.is)
# plots for simplified bs and full is statements for Airtel_Africa-------------------------------------
Airtel_Africa.bss <- simplify.bs(Airtel_Africa.bs)
plot.bsf(bsf=Airtel_Africa.bss)
plot.isf(isf=Airtel_Africa.is, dates=c(1,2))
# plots for simplified bs and full is statements for Vodafone_Group-------------------------------------
Vodafone_Group.bss <- simplify.bs(Vodafone_Group.bs)
plot.bsf(bsf=Vodafone_Group.bss)
plot.isf(isf=Vodafone_Group.is, dates=c(1,2))
# horizontal and vertical analyses for bs and is statements of Airtel_Africa-----------------------------
knitr::kable(horizonal.analysis(fs=Airtel_Africa.bs, type='bs', units = 1000000))
vertical.analysis(fs=Airtel_Africa.bs, type = 'bs', total = NULL)
knitr::kable(horizonal.analysis(fs=Airtel_Africa.is, type='is', units = 1000000))
vertical.analysis(fs=Airtel_Africa.is, type = 'is', total = NULL)
# horizontal and vertical analyses for bs and is statements of Vodafone_Group------------------------------
knitr::kable(horizonal.analysis(fs=Vodafone_Group.bs, type='bs', units = 1000000))
vertical.analysis(fs=Vodafone_Group.bs, type = 'bs', total = NULL)
knitr::kable(horizonal.analysis(fs=Vodafone_Group.is, type='is', units = 1000000))
vertical.analysis(fs=Vodafone_Group.is, type = 'is', total = NULL)
# Some Ratio Analysis for Airtel Africa-----------------------------------------
Airtel_Africa.all = merge(Airtel_Africa.bs, Airtel_Africa.is)
Airtel_Africa.ratios <- fin.ratios(fstats=Airtel_Africa.all, ratios=c(profit.margins, bsf.ratios, isf.ratios))
Airtel_Africa.ratios
plot(Airtel_Africa.ratios[,1:3], main='',type='b')
# Some Ratios Analysis for Vodafone Group---------------------------------------
Vodafone_Group.all = merge(Vodafone_Group.bs, Vodafone_Group.is)
Vodafone_Group.ratios <- fin.ratios(fstats=Vodafone_Group.all, ratios=c(profit.margins, bsf.ratios, isf.ratios))
Vodafone_Group.ratios
plot(Vodafone_Group.ratios[,1:3], main='',type='b')
setwd("C:/Users/User/Downloads/Math525/Coursework/Coursework FIles")
eval(call(load('banR.R')))
options(dplyr.print_max = 1000)
options(warn = -1)
options(stringsAsFactors = FALSE)
options(HTTPUserAgent = "name_surname   name_surname@domain.com")
Airtel_Africa.bs = make.statement(template='bs_template_Airtel_Africa.csv', skeleton="bs_skeleton.R", digits = 2)
Airtel_Africa.is = make.statement(template='is_template_Airtel_Africa.csv', skeleton="is_skeleton.R", digits = 2)
Vodafone_Group.bs = make.statement(template='bs_template_Vodafone_Group.csv', skeleton="bs_skeleton.R", digits = 2)
Vodafone_Group.is = make.statement(template='is_template_Vodafone_Group.csv', skeleton="is_skeleton.R", digits = 2)
check_statement(Airtel_Africa.bs)
check_statement(Airtel_Africa.is)
check_statement(Vodafone_Group.bs)
check_statement(Vodafone_Group.is)
Airtel_Africa.bss <- simplify.bs(Airtel_Africa.bs)
plot.bsf(bsf=Airtel_Africa.bss)
plot.isf(isf=Airtel_Africa.is, dates=c(1,2))
Vodafone_Group.bss <- simplify.bs(Vodafone_Group.bs)
plot.bsf(bsf=Vodafone_Group.bss)
